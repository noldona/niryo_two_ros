import os
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node
from launch.launch_description_sources import PythonLaunchDescriptionSource
from ament_index_python.packages import get_package_share_directory


def generate_launch_description():
    # Declare launch arguments
    execute_on_rpi_arg = DeclareLaunchArgument(
        'execute_on_niryo_one_raspberry_pi_image', default_value='false',
        description="Will not work on Raspberry Pi, use on a non-ARM computer only."
    )
    
    urdf_without_meshes_arg = DeclareLaunchArgument(
        'urdf_without_meshes', default_value='false',
        description="Enable URDF without meshes."
    )

    # Include base launch file
    niryo_one_base_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(get_package_share_directory('niryo_one_bringup'), 'launch', 'niryo_one_base_launch.py')
        ),
        launch_arguments={'urdf_without_meshes': LaunchConfiguration('urdf_without_meshes')}.items()
    )

    # Include controllers with simulation mode
    controllers_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(get_package_share_directory('niryo_one_bringup'), 'launch', 'controllers_launch.py')
        ),
        launch_arguments={'simulation_mode': 'true'}.items()
    )

    # Include robot commander with simulation mode
    robot_commander_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(get_package_share_directory('niryo_one_bringup'), 'launch', 'robot_commander_launch.py')
        ),
        launch_arguments={'simulation_mode': 'true'}.items()
    )

    # Include user interface with simulation mode
    user_interface_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(get_package_share_directory('niryo_one_bringup'), 'launch', 'user_interface_launch.py')
        ),
        launch_arguments={'simulation_mode': 'true'}.items()
    )

    # TF2 Web Republisher
    tf2_web_republisher = Node(
        package='tf2_web_republisher',
        executable='tf2_web_republisher',
        name='tf2_web_republisher',
        output='screen'
    )

    # Rosbridge Websocket
    rosbridge_websocket_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(get_package_share_directory('rosbridge_server'), 'launch', 'rosbridge_websocket_launch.py')
        ),
        launch_arguments={'port': '9090'}.items()
    )

    # RViz
    rviz = Node(
        package='rviz2',
        executable='rviz2',
        name='rviz',
        output='screen',
        arguments=['-d', os.path.join(get_package_share_directory('niryo_one_description'), 'config', 'default_config.rviz')]
    )

    # Return the launch description
    return LaunchDescription([
        execute_on_rpi_arg,
        urdf_without_meshes_arg,
        niryo_one_base_launch,
        controllers_launch,
        robot_commander_launch,
        user_interface_launch,
        tf2_web_republisher,
        rosbridge_websocket_launch,
        rviz
    ])
